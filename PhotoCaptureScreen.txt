import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';
import {
  View, Text, StyleSheet, TouchableOpacity, Image, Alert,
  ActivityIndicator, Platform, SafeAreaView, Dimensions, TextInput,
  Animated, Easing, Vibration
} from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { CameraView, useCameraPermissions, CameraCapturedPicture, CameraType } from 'expo-camera';
import { manipulateAsync, SaveFormat } from 'expo-image-manipulator';
import * as Location from 'expo-location';
import * as FileSystem from 'expo-file-system';
import { useNavigation, useRoute, useIsFocused } from '@react-navigation/native';
import { PhotoData, PhotoMetadata, PhotoBatch } from '../types/data';
import { COLORS, SPACING, FONTS, BORDER_RADIUS, SHADOWS } from '../styles/theme';
import { Ionicons } from '@expo/vector-icons';
import { logAnalyticsEvent, logErrorToFile } from '../services/analyticsService';
import { useAuth } from '../contexts/AuthContext';
import {
  ensureDbOpen,
  createPhotoBatch,
  savePhoto,
  getBatchDetails,
} from '../services/databaseService';
import { PhotoCaptureScreenNavigationProp, PhotoCaptureScreenRouteProp } from '../types/navigation';
import * as MediaLibrary from 'expo-media-library';
import * as Haptics from 'expo-haptics';
import { useSafeAreaInsets } from 'react-native-safe-area-context';

// Define LocationData interface for location tracking
interface LocationData {
  latitude: number;
  longitude: number;
  accuracy: number;
  timestamp: number;
  altitude: number;
  altitudeAccuracy: number;
  heading: number;
  speed: number;
}

// Constants - Memoized to prevent recalculations on re-renders
const { width: screenWidth, height: screenHeight } = Dimensions.get('window');
const SCAN_DEBOUNCE_DELAY = 300; // 300ms debounce for scans
const SCAN_FRAME_SIZE = Math.min(screenWidth * 0.7, 280); // Responsive scan frame size
const ANIMATION_DURATION = 2000; // Animation duration in ms
const FEEDBACK_DURATION = 1500; // Feedback display duration in ms
const HAPTIC_DURATION = 100; // Haptic feedback duration in ms

// Styles - Optimized and organized by component area for aviation quality control
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.black,
  },
  camera: {
    flex: 1,
  },
  // Aviation-specific styles for part identification
  partGuidanceText: {
    fontSize: FONTS.regular,
    fontWeight: FONTS.semiBold,
    color: COLORS.white,
    marginBottom: SPACING.medium,
    textAlign: 'center',
    backgroundColor: 'rgba(0,0,0,0.6)',
    paddingHorizontal: SPACING.medium,
    paddingVertical: SPACING.small,
    borderRadius: BORDER_RADIUS.small,
  },
  formatExamplesContainer: {
    marginTop: SPACING.medium,
    backgroundColor: 'rgba(0,0,0,0.6)',
    paddingHorizontal: SPACING.medium,
    paddingVertical: SPACING.small,
    borderRadius: BORDER_RADIUS.small,
  },
  formatExampleText: {
    fontSize: FONTS.small,
    fontWeight: FONTS.normal,
    color: COLORS.white,
    textAlign: 'center',
  },
  successDetailText: {
    fontSize: FONTS.small,
    fontWeight: FONTS.normal,
    color: COLORS.white,
    textAlign: 'center',
    marginTop: SPACING.tiny,
  },
  permissionContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: SPACING.large,
  },
  permissionText: {
    fontSize: FONTS.regular,
    fontWeight: FONTS.normal,
    color: COLORS.text,
    textAlign: 'center',
    marginVertical: SPACING.medium,
  },
  permissionButton: {
    backgroundColor: COLORS.primary,
    paddingVertical: SPACING.small,
    paddingHorizontal: SPACING.medium,
    borderRadius: BORDER_RADIUS.small,
    marginTop: SPACING.medium,
  },
  permissionButtonText: {
    fontSize: FONTS.regular,
    fontWeight: FONTS.semiBold,
    color: COLORS.white,
  },
  loadingOverlay: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: 'rgba(0,0,0,0.7)',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 10,
  },
  loadingText: {
    fontSize: FONTS.regular,
    fontWeight: FONTS.normal,
    color: COLORS.white,
    marginTop: SPACING.small,
  },
  scanOverlay: {
    ...StyleSheet.absoluteFillObject,
    justifyContent: 'center',
    alignItems: 'center',
  },
  scanFrameContainer: {
    alignItems: 'center',
  },
  scanFrame: {
    width: SCAN_FRAME_SIZE,
    height: SCAN_FRAME_SIZE,
    borderWidth: 2,
    borderColor: COLORS.white,
    borderRadius: BORDER_RADIUS.small,
    overflow: 'hidden',
  },
  scanLine: {
    height: 2,
    width: '100%',
    backgroundColor: COLORS.primary,
  },
  scanText: {
    fontSize: FONTS.regular,
    fontWeight: FONTS.normal,
    color: COLORS.white,
    marginTop: SPACING.medium,
    textAlign: 'center',
    backgroundColor: 'rgba(0,0,0,0.5)',
    paddingHorizontal: SPACING.medium,
    paddingVertical: SPACING.small,
    borderRadius: BORDER_RADIUS.small,
  },
  topControls: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    flexDirection: 'row',
    justifyContent: 'space-between',
    padding: SPACING.medium,
  },
  backButton: {
    width: 44,
    height: 44,
    borderRadius: 22,
    backgroundColor: 'rgba(0,0,0,0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  topRightControls: {
    flexDirection: 'row',
  },
  iconButton: {
    width: 44,
    height: 44,
    borderRadius: 22,
    backgroundColor: 'rgba(0,0,0,0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: SPACING.small,
  },
  bottomControls: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    padding: SPACING.medium,
  },
  controlsRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  controlButton: {
    width: 80,
    height: 80,
    borderRadius: BORDER_RADIUS.medium,
    backgroundColor: 'rgba(0,0,0,0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  controlButtonText: {
    fontSize: FONTS.small,
    fontWeight: FONTS.normal,
    color: COLORS.white,
    marginTop: SPACING.tiny,
  },
  captureButton: {
    width: 80,
    height: 80,
    borderRadius: 40,
    backgroundColor: COLORS.primary,
    justifyContent: 'center',
    alignItems: 'center',
    ...SHADOWS.medium,
  },
  captureButtonDisabled: {
    opacity: 0.5,
  },
  captureButtonInner: {
    width: 70,
    height: 70,
    borderRadius: 35,
    borderWidth: 2,
    borderColor: COLORS.white,
    justifyContent: 'center',
    alignItems: 'center',
  },
  captureButtonsContainer: {
    alignItems: 'center',
  },
  defectButton: {
    backgroundColor: COLORS.error,
    paddingVertical: SPACING.small,
    paddingHorizontal: SPACING.medium,
    borderRadius: BORDER_RADIUS.small,
    marginTop: SPACING.small,
    flexDirection: 'row',
    alignItems: 'center',
  },
  defectButtonText: {
    fontSize: FONTS.small,
    fontWeight: FONTS.semiBold,
    color: COLORS.white,
    marginLeft: 5,
  },
  scanningIndicator: {
    width: 80,
    height: 80,
    borderRadius: 40,
    backgroundColor: 'rgba(0,0,0,0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  scanningText: {
    fontSize: FONTS.small,
    fontWeight: FONTS.normal,
    color: COLORS.white,
  },
  manualInputContainer: {
    flexDirection: 'row',
    backgroundColor: 'rgba(0,0,0,0.7)',
    borderRadius: BORDER_RADIUS.small,
    marginBottom: SPACING.medium,
    overflow: 'hidden',
  },
  manualInput: {
    flex: 1,
    height: 50,
    color: COLORS.white,
    fontSize: FONTS.regular,
    fontWeight: FONTS.normal,
    paddingHorizontal: SPACING.medium,
  },
  manualInputButton: {
    width: 50,
    height: 50,
    backgroundColor: COLORS.primary,
    justifyContent: 'center',
    alignItems: 'center',
  },
  batchInfoContainer: {
    backgroundColor: 'rgba(0,0,0,0.7)',
    borderRadius: BORDER_RADIUS.small,
    padding: SPACING.medium,
    marginBottom: SPACING.medium,
  },
  batchInfoText: {
    fontSize: FONTS.regular,
    fontWeight: FONTS.normal,
    color: COLORS.white,
  },
  photoCountText: {
    fontSize: FONTS.small,
    fontWeight: FONTS.normal,
    color: COLORS.white,
    marginTop: SPACING.tiny,
  },
  finishButton: {
    flexDirection: 'row',
    backgroundColor: COLORS.success,
    borderRadius: BORDER_RADIUS.small,
    padding: SPACING.medium,
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: SPACING.medium,
    ...SHADOWS.small,
  },
  finishButtonDisabled: {
    opacity: 0.5,
  },
  finishButtonText: {
    fontSize: FONTS.regular,
    fontWeight: FONTS.semiBold,
    color: COLORS.white,
    marginRight: SPACING.small,
  },
  finishButtonContent: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  photoCountBadge: {
    backgroundColor: COLORS.white,
    borderRadius: 12,
    width: 24,
    height: 24,
    justifyContent: 'center',
    alignItems: 'center',
  },
  successFeedback: {
    position: 'absolute',
    top: '50%',
    left: '50%',
    width: 200,
    marginLeft: -100,
    marginTop: -50,
    alignItems: 'center',
    justifyContent: 'center',
  },
  successFeedbackInner: {
    backgroundColor: 'rgba(0,0,0,0.8)',
    borderRadius: BORDER_RADIUS.medium,
    padding: SPACING.medium,
    alignItems: 'center',
    justifyContent: 'center',
    ...SHADOWS.medium,
  },
  successFeedbackText: {
    fontSize: FONTS.regular,
    fontWeight: FONTS.normal,
    color: COLORS.white,
    textAlign: 'center',
    marginTop: SPACING.small,
  },
  safeArea: {
    flex: 1,
    backgroundColor: COLORS.black,
  },
  cameraContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: COLORS.black,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: COLORS.black,
    padding: SPACING.large,
  },
  overlayContainer: {
    ...StyleSheet.absoluteFillObject,
    zIndex: 1,
  },
  overlayText: {
    color: COLORS.white,
    fontSize: FONTS.regular,
    fontWeight: 'bold',
  },
  controlsContainer: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    padding: SPACING.medium,
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: SPACING.medium,
    paddingBottom: Platform.OS === 'ios' ? SPACING.large : SPACING.medium,
    paddingTop: SPACING.small,
    backgroundColor: COLORS.black,
    borderTopWidth: 1,
    borderTopColor: 'rgba(255,255,255,0.1)',
    width: '100%',
    zIndex: 2,
  }
});

/**
 * PhotoCaptureScreen Component
 * 
 * A streamlined camera interface for industrial quality control photography
 * Optimized for high-volume workflows in shipping & receiving environments
 */
const PhotoCaptureScreen: React.FC = () => {
  const navigation = useNavigation<PhotoCaptureScreenNavigationProp>();
  const route = useRoute<PhotoCaptureScreenRouteProp>();
  const isFocused = useIsFocused();
  const insets = useSafeAreaInsets();
  const { userId } = useAuth();
  
  // Refs - Using useRef for values that don't trigger re-renders
  const cameraRef = useRef<CameraView>(null);
  const manualInputRef = useRef<TextInput>(null);
  const lastScanTime = useRef<number>(0); // For debouncing scans
  const lastScannedRef = useRef<string | null>(null); // For debouncing scans
  const mountedRef = useRef<boolean>(false); // Track component mount state
  
  // Animation values for scan line and success feedback
  const scanLineAnimation = useRef(new Animated.Value(0)).current;
  const successFeedbackOpacity = useRef(new Animated.Value(0)).current;
  const successFeedbackScale = useRef(new Animated.Value(0.8)).current;
  
  // Permissions - Using permission hooks for camera, media library, and location
  const [cameraPermissionInfo, requestCameraPermission] = useCameraPermissions();
  const [mediaLibraryPermissionInfo, requestMediaLibraryPermission] = MediaLibrary.usePermissions();
  const [locationPermissionInfo, requestLocationPermission] = Location.useForegroundPermissions();
  
  // Camera state - Optimized to minimize state updates
  const [torch, setTorch] = useState(false);
  const [cameraType, setCameraType] = useState<CameraType>('back');
  const [cameraReady, setCameraReady] = useState(false);
  const [isCameraInitialized, setIsCameraInitialized] = useState(false);
  const [isCapturing, setIsCapturing] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  // Batch and photo state - Core data for the component
  const [photoBatch, setPhotoBatch] = useState<PhotoData[]>([]);
  const [currentBatch, setCurrentBatch] = useState<PhotoBatch | null>(null);
  const [identifier, setIdentifier] = useState<string>('');
  const [identifierType, setIdentifierType] = useState<'Order' | 'Inventory'>('Inventory');
  const [scanFeedback, setScanFeedback] = useState<string>('Scan barcode or QR code');
  const [isScanningActive, setIsScanningActive] = useState<boolean>(true);
  const [manualIdInput, setManualIdInput] = useState<string>('');
  const [lastCapturedPhoto, setLastCapturedPhoto] = useState<PhotoData | null>(null);
  const [scannedData, setScannedData] = useState<string | null>(null);

  // UI state - For user interface elements
  const [showManualInput, setShowManualInput] = useState(false);

  // Show success feedback with animation and haptic feedback
  const showSuccessFeedback = useCallback((message: string) => {
    // Update feedback message
    setScanFeedback(message);
    
    // Provide haptic feedback
    Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
    
    // Animate the feedback with smooth appearance and disappearance
    Animated.sequence([
      Animated.parallel([
        Animated.timing(successFeedbackOpacity, {
          toValue: 1,
          duration: 300,
          useNativeDriver: true, // Hardware acceleration for smoother animations
        }),
        Animated.timing(successFeedbackScale, {
          toValue: 1,
          duration: 300,
          useNativeDriver: true,
        }),
      ]),
      Animated.delay(1500),
      Animated.timing(successFeedbackOpacity, {
        toValue: 0,
        duration: 300,
        useNativeDriver: true,
      }),
    ]).start();
  }, [successFeedbackOpacity, successFeedbackScale]);



  // Track component mount state to prevent memory leaks
  useEffect(() => {
    mountedRef.current = true;
    return () => {
      mountedRef.current = false;
    };
  }, []);

  // Request permissions when component mounts - optimized with Promise.all for parallel requests
  useEffect(() => {
    const requestPermissions = async () => {
      try {
        // Request all permissions in parallel for faster initialization
        await Promise.all([
          requestCameraPermission(),
          requestMediaLibraryPermission(),
          requestLocationPermission(),
        ]);

        // ... existing code ...
      } catch (error) {
        console.error('Error loading batch:', error);
        Alert.alert('Error', 'Failed to load batch. Please try again.');
        logErrorToFile('loadExistingBatch', error instanceof Error ? error : new Error(String(error)));
      } finally {
        setIsLoading(false);
      }
    };

    requestPermissions();
  }, []);

  // Handle scanned ID submission - optimized for industrial environment with improved error handling
  const handleScannedIdSubmit = useCallback(async (scannedId: string) => {
    // ... existing code ...
  }, [isLoading, userId, showSuccessFeedback]);

  // Handle barcode scanning with debouncing to prevent duplicates
  const handleBarCodeScanned = useCallback(({ data }: { data: string }) => {
    // ... existing code ...
  }, [isScanningActive, isLoading, handleScannedIdSubmit, showSuccessFeedback]);

  // Handle manual ID submission with validation
  const handleManualIdSubmit = useCallback(() => {
    // ... existing code ...
  }, [manualIdInput, handleScannedIdSubmit, identifierType, isLoading]);

  // Take a picture using the camera - optimized for performance and reliability
  const takePicture = useCallback(async (isDefect: boolean = false) => {
    // ... existing code ...
  }, [cameraRef, isCapturing, identifier, currentBatch, photoBatch.length, showSuccessFeedback]);

  // Process and save the captured photo - optimized for aviation quality control workflows
  const processAndSavePhoto = useCallback(async (photo: CameraCapturedPicture, isDefect: boolean) => {
    // ... existing code ...
  }, [cameraRef, identifier, currentBatch, userId, locationPermissionInfo?.granted, mediaLibraryPermissionInfo?.granted]);

  // Reset the current batch and return to scanning mode
  const resetBatch = useCallback(() => {
    // ... existing code ...
  }, [photoBatch.length]);

  // Reset ID fields when navigating away from the screen
  useEffect(() => {
    if (!isFocused) {
      setIdentifierType('Inventory');
      setIdentifier('');
      setCurrentBatch(null);
      setPhotoBatch([]);
      setIsScanningActive(true);
      setScanFeedback('Scan barcode or QR code');
    } else if (route.params && 'identifier' in route.params && route.params.identifier && 'identifierType' in route.params) {
      setIdentifier(route.params.identifier);
      const idType = typeof route.params.identifierType === 'string' ? route.params.identifierType : 'Inventory';
      setIdentifierType(idType === 'Order' ? 'Order' : 'Inventory');
      setIsScanningActive(false);
      setScanFeedback(`Using ${route.params.identifierType || 'Inventory'}: ${route.params.identifier}`);
    }
  }, [isFocused]);

  // Toggle manual input mode
  const toggleManualInput = useCallback(() => {
    setShowManualInput(!showManualInput);
    if (!showManualInput) {
      setTimeout(() => {
        manualInputRef.current?.focus();
      }, 100);
    }
  }, [showManualInput]);

  // Memoize permission check to prevent unnecessary re-renders
  const permissionsReady = useMemo(() => {
    return cameraPermissionInfo?.granted && mediaLibraryPermissionInfo?.granted && locationPermissionInfo?.granted;
  }, [cameraPermissionInfo?.granted, mediaLibraryPermissionInfo?.granted, locationPermissionInfo?.granted]);

  if (!cameraPermissionInfo || !mediaLibraryPermissionInfo || !locationPermissionInfo) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color={COLORS.primary} />
        <Text style={styles.loadingText}>Requesting permissions...</Text>
      </View>
    );
  }

  if (!permissionsReady) {
    return (
      <View style={styles.permissionContainer}>
        <Ionicons name="alert-circle" size={60} color={COLORS.error} />
        <Text style={styles.permissionText}>
          {!cameraPermissionInfo.granted && !mediaLibraryPermissionInfo.granted
            ? 'Camera and Media Library permissions are required.'
            : !cameraPermissionInfo.granted
            ? 'Camera permission is required.'
            : 'Media Library permission is required.'}
        </Text>
        <TouchableOpacity 
          style={styles.permissionButton}
          onPress={async () => {
            if (!cameraPermissionInfo.granted) await requestCameraPermission();
            if (!mediaLibraryPermissionInfo.granted) await requestMediaLibraryPermission();
          }}
        >
          <Text style={styles.permissionButtonText}>Grant Permissions</Text>
        </TouchableOpacity>
      </View>
    );
  }

        
        {/* Top controls */}
        <View style={[styles.topControls, { marginTop: insets.top }]}>
          <TouchableOpacity 
            style={styles.backButton}
            onPress={() => navigation.goBack()}
          >
            <Ionicons name="arrow-back" size={24} color={COLORS.white} />
          </TouchableOpacity>
          
          <View style={styles.topRightControls}>
            {isScanningActive && (
              <TouchableOpacity 
                style={styles.iconButton}
                onPress={toggleManualInput}
              >
                <Ionicons name="create-outline" size={24} color={COLORS.white} />
              </TouchableOpacity>
            )}
            
            {currentBatch && (
              <TouchableOpacity 
                style={styles.iconButton}
                onPress={resetBatch}
              >
                <Ionicons name="refresh" size={24} color={COLORS.white} />
              </TouchableOpacity>
            )}
          </View>
        {/* Manual input overlay */}
        {showManualInput && (
          <View style={[styles.overlayContainer, { justifyContent: 'center', padding: SPACING.medium }]}>
            <View style={styles.manualInputContainer}>
              <TextInput
                ref={manualInputRef}
                style={styles.manualInput}
                placeholder="Enter part or order number"
                placeholderTextColor="rgba(255,255,255,0.6)"
                value={manualIdInput}
                onChangeText={setManualIdInput}
                autoCapitalize="characters"
                autoCorrect={false}
                returnKeyType="done"
                onSubmitEditing={handleManualIdSubmit}
              />
              <TouchableOpacity style={styles.manualInputButton} onPress={handleManualIdSubmit}>
                <Ionicons name="checkmark" size={24} color={COLORS.white} />
              </TouchableOpacity>
            </View>
          </View>
        )}
        
        {/* Batch info display with enhanced aviation context */}
        {currentBatch && !showManualInput && (
          <View style={[styles.overlayContainer, { top: insets.top + 60, padding: SPACING.medium }]}>
            <View style={styles.batchInfoContainer}>
              <Text style={styles.batchInfoText}>
                {currentBatch.type}: {identifier}
              </Text>
              <Text style={styles.photoCountText}>
                Photos: {photoBatch.length} | Part Type: {
                  identifier.startsWith('ENG-') ? 'Engine' : 
                  identifier.startsWith('STRUCT-') ? 'Structural' : 
                  identifier.startsWith('ELEC-') ? 'Electrical' : 'General'
                }
              </Text>
            </View>
          </View>
        )}
        
        {/* Bottom controls */}
        <View style={styles.bottomControls}>
          <View style={styles.controlsRow}>
            {/* Left: Gallery Button */}
            <TouchableOpacity 
              style={styles.iconButton}
              onPress={() => {
                if (currentBatch && photoBatch.length > 0) {
                  navigation.navigate('BatchPreview', {
                    batchId: currentBatch.id,
                    identifier: identifier
                  });
                } else {
                  Alert.alert('No Photos', 'Take some photos first to view them in the gallery.');
                }
              }}
            >
              <Ionicons name="images" size={28} color={COLORS.white} />
            </TouchableOpacity>

            {/* Center: Capture Buttons */}
            <View style={styles.captureButtonsContainer}>
              {/* Regular Photo Button */}
              <TouchableOpacity
                disabled={!cameraReady || !currentBatch || isCapturing || isLoading}
                style={[
                  styles.captureButton,
                  (!cameraReady || !currentBatch || isCapturing || isLoading) && styles.captureButtonDisabled
                ]}
                onPress={() => takePicture(false)}
              >
                {isCapturing ? (
                  <ActivityIndicator size="small" color={COLORS.white} />
                ) : (
                  <Ionicons name="camera" size={40} color={COLORS.white} />
                )}
              </TouchableOpacity>

              {/* Defect Photo Button */}
              <TouchableOpacity
                disabled={!cameraReady || !currentBatch || isCapturing || isLoading}
                style={[
                  styles.defectButton,
                  (!cameraReady || !currentBatch || isCapturing || isLoading) && styles.captureButtonDisabled
                ]}
                onPress={() => takePicture(true)}
              >
                <Ionicons name="warning" size={24} color={COLORS.white} />
                <Text style={styles.defectButtonText}>Defect</Text>
              </TouchableOpacity>
            </View>

            {/* Right: Flash Toggle */}
            <TouchableOpacity
              onPress={() => setTorch(!torch)}
              style={styles.iconButton}
            >
              <Ionicons
                name={torch ? "flash" : "flash-off"}
                size={28}
                color={torch ? "#FFCC00" : COLORS.white}
              />
            </TouchableOpacity>
          </View>

          {/* Bottom Row with Finish Button - Enhanced for aviation QC workflows */}
          {currentBatch && (
            <TouchableOpacity
              style={[styles.finishButton, photoBatch.length === 0 && styles.finishButtonDisabled]}
              disabled={photoBatch.length === 0}
              onPress={() => {
                if (currentBatch && photoBatch.length > 0) {
                  navigation.navigate('BatchPreview', {
                    batchId: currentBatch.id,
                    identifier: identifier
                  });
                }
              }}
            >
              <View style={styles.finishButtonContent}>
                <Ionicons name="checkmark-circle" size={24} color={COLORS.white} />
                <Text style={styles.finishButtonText}>Complete Inspection</Text>
              </View>
              <View style={styles.photoCountBadge}>
                <Text style={{color: COLORS.black, fontWeight: 'bold'}}>{photoBatch.length}</Text>
              </View>
            </TouchableOpacity>
          )}
        </View>
      </View>
    </SafeAreaView>
  );
};

export default PhotoCaptureScreen;
